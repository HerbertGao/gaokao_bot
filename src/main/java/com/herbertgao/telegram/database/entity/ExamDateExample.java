package com.herbertgao.telegram.database.entity;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

public class ExamDateExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table exam_date
     *
     * @mbg.generated Thu Sep 05 13:16:58 CST 2019
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table exam_date
     *
     * @mbg.generated Thu Sep 05 13:16:58 CST 2019
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table exam_date
     *
     * @mbg.generated Thu Sep 05 13:16:58 CST 2019
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table exam_date
     *
     * @mbg.generated Thu Sep 05 13:16:58 CST 2019
     */
    public ExamDateExample() {
        oredCriteria = new ArrayList<>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table exam_date
     *
     * @mbg.generated Thu Sep 05 13:16:58 CST 2019
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table exam_date
     *
     * @mbg.generated Thu Sep 05 13:16:58 CST 2019
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table exam_date
     *
     * @mbg.generated Thu Sep 05 13:16:58 CST 2019
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table exam_date
     *
     * @mbg.generated Thu Sep 05 13:16:58 CST 2019
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table exam_date
     *
     * @mbg.generated Thu Sep 05 13:16:58 CST 2019
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table exam_date
     *
     * @mbg.generated Thu Sep 05 13:16:58 CST 2019
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table exam_date
     *
     * @mbg.generated Thu Sep 05 13:16:58 CST 2019
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table exam_date
     *
     * @mbg.generated Thu Sep 05 13:16:58 CST 2019
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table exam_date
     *
     * @mbg.generated Thu Sep 05 13:16:58 CST 2019
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table exam_date
     *
     * @mbg.generated Thu Sep 05 13:16:58 CST 2019
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table exam_date
     *
     * @mbg.generated Thu Sep 05 13:16:58 CST 2019
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("id =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("id <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("id >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("id >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("id <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("id <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Integer> values) {
            addCriterion("id in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Integer> values) {
            addCriterion("id not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("id between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("id not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andExamYearIsNull() {
            addCriterion("exam_year is null");
            return (Criteria) this;
        }

        public Criteria andExamYearIsNotNull() {
            addCriterion("exam_year is not null");
            return (Criteria) this;
        }

        public Criteria andExamYearEqualTo(Integer value) {
            addCriterion("exam_year =", value, "examYear");
            return (Criteria) this;
        }

        public Criteria andExamYearNotEqualTo(Integer value) {
            addCriterion("exam_year <>", value, "examYear");
            return (Criteria) this;
        }

        public Criteria andExamYearGreaterThan(Integer value) {
            addCriterion("exam_year >", value, "examYear");
            return (Criteria) this;
        }

        public Criteria andExamYearGreaterThanOrEqualTo(Integer value) {
            addCriterion("exam_year >=", value, "examYear");
            return (Criteria) this;
        }

        public Criteria andExamYearLessThan(Integer value) {
            addCriterion("exam_year <", value, "examYear");
            return (Criteria) this;
        }

        public Criteria andExamYearLessThanOrEqualTo(Integer value) {
            addCriterion("exam_year <=", value, "examYear");
            return (Criteria) this;
        }

        public Criteria andExamYearIn(List<Integer> values) {
            addCriterion("exam_year in", values, "examYear");
            return (Criteria) this;
        }

        public Criteria andExamYearNotIn(List<Integer> values) {
            addCriterion("exam_year not in", values, "examYear");
            return (Criteria) this;
        }

        public Criteria andExamYearBetween(Integer value1, Integer value2) {
            addCriterion("exam_year between", value1, value2, "examYear");
            return (Criteria) this;
        }

        public Criteria andExamYearNotBetween(Integer value1, Integer value2) {
            addCriterion("exam_year not between", value1, value2, "examYear");
            return (Criteria) this;
        }

        public Criteria andExamDescIsNull() {
            addCriterion("exam_desc is null");
            return (Criteria) this;
        }

        public Criteria andExamDescIsNotNull() {
            addCriterion("exam_desc is not null");
            return (Criteria) this;
        }

        public Criteria andExamDescEqualTo(String value) {
            addCriterion("exam_desc =", value, "examDesc");
            return (Criteria) this;
        }

        public Criteria andExamDescNotEqualTo(String value) {
            addCriterion("exam_desc <>", value, "examDesc");
            return (Criteria) this;
        }

        public Criteria andExamDescGreaterThan(String value) {
            addCriterion("exam_desc >", value, "examDesc");
            return (Criteria) this;
        }

        public Criteria andExamDescGreaterThanOrEqualTo(String value) {
            addCriterion("exam_desc >=", value, "examDesc");
            return (Criteria) this;
        }

        public Criteria andExamDescLessThan(String value) {
            addCriterion("exam_desc <", value, "examDesc");
            return (Criteria) this;
        }

        public Criteria andExamDescLessThanOrEqualTo(String value) {
            addCriterion("exam_desc <=", value, "examDesc");
            return (Criteria) this;
        }

        public Criteria andExamDescLike(String value) {
            addCriterion("exam_desc like", value, "examDesc");
            return (Criteria) this;
        }

        public Criteria andExamDescNotLike(String value) {
            addCriterion("exam_desc not like", value, "examDesc");
            return (Criteria) this;
        }

        public Criteria andExamDescIn(List<String> values) {
            addCriterion("exam_desc in", values, "examDesc");
            return (Criteria) this;
        }

        public Criteria andExamDescNotIn(List<String> values) {
            addCriterion("exam_desc not in", values, "examDesc");
            return (Criteria) this;
        }

        public Criteria andExamDescBetween(String value1, String value2) {
            addCriterion("exam_desc between", value1, value2, "examDesc");
            return (Criteria) this;
        }

        public Criteria andExamDescNotBetween(String value1, String value2) {
            addCriterion("exam_desc not between", value1, value2, "examDesc");
            return (Criteria) this;
        }

        public Criteria andShortDescIsNull() {
            addCriterion("short_desc is null");
            return (Criteria) this;
        }

        public Criteria andShortDescIsNotNull() {
            addCriterion("short_desc is not null");
            return (Criteria) this;
        }

        public Criteria andShortDescEqualTo(String value) {
            addCriterion("short_desc =", value, "shortDesc");
            return (Criteria) this;
        }

        public Criteria andShortDescNotEqualTo(String value) {
            addCriterion("short_desc <>", value, "shortDesc");
            return (Criteria) this;
        }

        public Criteria andShortDescGreaterThan(String value) {
            addCriterion("short_desc >", value, "shortDesc");
            return (Criteria) this;
        }

        public Criteria andShortDescGreaterThanOrEqualTo(String value) {
            addCriterion("short_desc >=", value, "shortDesc");
            return (Criteria) this;
        }

        public Criteria andShortDescLessThan(String value) {
            addCriterion("short_desc <", value, "shortDesc");
            return (Criteria) this;
        }

        public Criteria andShortDescLessThanOrEqualTo(String value) {
            addCriterion("short_desc <=", value, "shortDesc");
            return (Criteria) this;
        }

        public Criteria andShortDescLike(String value) {
            addCriterion("short_desc like", value, "shortDesc");
            return (Criteria) this;
        }

        public Criteria andShortDescNotLike(String value) {
            addCriterion("short_desc not like", value, "shortDesc");
            return (Criteria) this;
        }

        public Criteria andShortDescIn(List<String> values) {
            addCriterion("short_desc in", values, "shortDesc");
            return (Criteria) this;
        }

        public Criteria andShortDescNotIn(List<String> values) {
            addCriterion("short_desc not in", values, "shortDesc");
            return (Criteria) this;
        }

        public Criteria andShortDescBetween(String value1, String value2) {
            addCriterion("short_desc between", value1, value2, "shortDesc");
            return (Criteria) this;
        }

        public Criteria andShortDescNotBetween(String value1, String value2) {
            addCriterion("short_desc not between", value1, value2, "shortDesc");
            return (Criteria) this;
        }

        public Criteria andExamBeginDateIsNull() {
            addCriterion("exam_begin_date is null");
            return (Criteria) this;
        }

        public Criteria andExamBeginDateIsNotNull() {
            addCriterion("exam_begin_date is not null");
            return (Criteria) this;
        }

        public Criteria andExamBeginDateEqualTo(LocalDateTime value) {
            addCriterion("exam_begin_date =", value, "examBeginDate");
            return (Criteria) this;
        }

        public Criteria andExamBeginDateNotEqualTo(LocalDateTime value) {
            addCriterion("exam_begin_date <>", value, "examBeginDate");
            return (Criteria) this;
        }

        public Criteria andExamBeginDateGreaterThan(LocalDateTime value) {
            addCriterion("exam_begin_date >", value, "examBeginDate");
            return (Criteria) this;
        }

        public Criteria andExamBeginDateGreaterThanOrEqualTo(LocalDateTime value) {
            addCriterion("exam_begin_date >=", value, "examBeginDate");
            return (Criteria) this;
        }

        public Criteria andExamBeginDateLessThan(LocalDateTime value) {
            addCriterion("exam_begin_date <", value, "examBeginDate");
            return (Criteria) this;
        }

        public Criteria andExamBeginDateLessThanOrEqualTo(LocalDateTime value) {
            addCriterion("exam_begin_date <=", value, "examBeginDate");
            return (Criteria) this;
        }

        public Criteria andExamBeginDateIn(List<LocalDateTime> values) {
            addCriterion("exam_begin_date in", values, "examBeginDate");
            return (Criteria) this;
        }

        public Criteria andExamBeginDateNotIn(List<LocalDateTime> values) {
            addCriterion("exam_begin_date not in", values, "examBeginDate");
            return (Criteria) this;
        }

        public Criteria andExamBeginDateBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("exam_begin_date between", value1, value2, "examBeginDate");
            return (Criteria) this;
        }

        public Criteria andExamBeginDateNotBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("exam_begin_date not between", value1, value2, "examBeginDate");
            return (Criteria) this;
        }

        public Criteria andExamEndDateIsNull() {
            addCriterion("exam_end_date is null");
            return (Criteria) this;
        }

        public Criteria andExamEndDateIsNotNull() {
            addCriterion("exam_end_date is not null");
            return (Criteria) this;
        }

        public Criteria andExamEndDateEqualTo(LocalDateTime value) {
            addCriterion("exam_end_date =", value, "examEndDate");
            return (Criteria) this;
        }

        public Criteria andExamEndDateNotEqualTo(LocalDateTime value) {
            addCriterion("exam_end_date <>", value, "examEndDate");
            return (Criteria) this;
        }

        public Criteria andExamEndDateGreaterThan(LocalDateTime value) {
            addCriterion("exam_end_date >", value, "examEndDate");
            return (Criteria) this;
        }

        public Criteria andExamEndDateGreaterThanOrEqualTo(LocalDateTime value) {
            addCriterion("exam_end_date >=", value, "examEndDate");
            return (Criteria) this;
        }

        public Criteria andExamEndDateLessThan(LocalDateTime value) {
            addCriterion("exam_end_date <", value, "examEndDate");
            return (Criteria) this;
        }

        public Criteria andExamEndDateLessThanOrEqualTo(LocalDateTime value) {
            addCriterion("exam_end_date <=", value, "examEndDate");
            return (Criteria) this;
        }

        public Criteria andExamEndDateIn(List<LocalDateTime> values) {
            addCriterion("exam_end_date in", values, "examEndDate");
            return (Criteria) this;
        }

        public Criteria andExamEndDateNotIn(List<LocalDateTime> values) {
            addCriterion("exam_end_date not in", values, "examEndDate");
            return (Criteria) this;
        }

        public Criteria andExamEndDateBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("exam_end_date between", value1, value2, "examEndDate");
            return (Criteria) this;
        }

        public Criteria andExamEndDateNotBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("exam_end_date not between", value1, value2, "examEndDate");
            return (Criteria) this;
        }

        public Criteria andExamYearBeginDateIsNull() {
            addCriterion("exam_year_begin_date is null");
            return (Criteria) this;
        }

        public Criteria andExamYearBeginDateIsNotNull() {
            addCriterion("exam_year_begin_date is not null");
            return (Criteria) this;
        }

        public Criteria andExamYearBeginDateEqualTo(LocalDateTime value) {
            addCriterion("exam_year_begin_date =", value, "examYearBeginDate");
            return (Criteria) this;
        }

        public Criteria andExamYearBeginDateNotEqualTo(LocalDateTime value) {
            addCriterion("exam_year_begin_date <>", value, "examYearBeginDate");
            return (Criteria) this;
        }

        public Criteria andExamYearBeginDateGreaterThan(LocalDateTime value) {
            addCriterion("exam_year_begin_date >", value, "examYearBeginDate");
            return (Criteria) this;
        }

        public Criteria andExamYearBeginDateGreaterThanOrEqualTo(LocalDateTime value) {
            addCriterion("exam_year_begin_date >=", value, "examYearBeginDate");
            return (Criteria) this;
        }

        public Criteria andExamYearBeginDateLessThan(LocalDateTime value) {
            addCriterion("exam_year_begin_date <", value, "examYearBeginDate");
            return (Criteria) this;
        }

        public Criteria andExamYearBeginDateLessThanOrEqualTo(LocalDateTime value) {
            addCriterion("exam_year_begin_date <=", value, "examYearBeginDate");
            return (Criteria) this;
        }

        public Criteria andExamYearBeginDateIn(List<LocalDateTime> values) {
            addCriterion("exam_year_begin_date in", values, "examYearBeginDate");
            return (Criteria) this;
        }

        public Criteria andExamYearBeginDateNotIn(List<LocalDateTime> values) {
            addCriterion("exam_year_begin_date not in", values, "examYearBeginDate");
            return (Criteria) this;
        }

        public Criteria andExamYearBeginDateBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("exam_year_begin_date between", value1, value2, "examYearBeginDate");
            return (Criteria) this;
        }

        public Criteria andExamYearBeginDateNotBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("exam_year_begin_date not between", value1, value2, "examYearBeginDate");
            return (Criteria) this;
        }

        public Criteria andExamYearEndDateIsNull() {
            addCriterion("exam_year_end_date is null");
            return (Criteria) this;
        }

        public Criteria andExamYearEndDateIsNotNull() {
            addCriterion("exam_year_end_date is not null");
            return (Criteria) this;
        }

        public Criteria andExamYearEndDateEqualTo(LocalDateTime value) {
            addCriterion("exam_year_end_date =", value, "examYearEndDate");
            return (Criteria) this;
        }

        public Criteria andExamYearEndDateNotEqualTo(LocalDateTime value) {
            addCriterion("exam_year_end_date <>", value, "examYearEndDate");
            return (Criteria) this;
        }

        public Criteria andExamYearEndDateGreaterThan(LocalDateTime value) {
            addCriterion("exam_year_end_date >", value, "examYearEndDate");
            return (Criteria) this;
        }

        public Criteria andExamYearEndDateGreaterThanOrEqualTo(LocalDateTime value) {
            addCriterion("exam_year_end_date >=", value, "examYearEndDate");
            return (Criteria) this;
        }

        public Criteria andExamYearEndDateLessThan(LocalDateTime value) {
            addCriterion("exam_year_end_date <", value, "examYearEndDate");
            return (Criteria) this;
        }

        public Criteria andExamYearEndDateLessThanOrEqualTo(LocalDateTime value) {
            addCriterion("exam_year_end_date <=", value, "examYearEndDate");
            return (Criteria) this;
        }

        public Criteria andExamYearEndDateIn(List<LocalDateTime> values) {
            addCriterion("exam_year_end_date in", values, "examYearEndDate");
            return (Criteria) this;
        }

        public Criteria andExamYearEndDateNotIn(List<LocalDateTime> values) {
            addCriterion("exam_year_end_date not in", values, "examYearEndDate");
            return (Criteria) this;
        }

        public Criteria andExamYearEndDateBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("exam_year_end_date between", value1, value2, "examYearEndDate");
            return (Criteria) this;
        }

        public Criteria andExamYearEndDateNotBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("exam_year_end_date not between", value1, value2, "examYearEndDate");
            return (Criteria) this;
        }

        public Criteria andIsDeleteIsNull() {
            addCriterion("is_delete is null");
            return (Criteria) this;
        }

        public Criteria andIsDeleteIsNotNull() {
            addCriterion("is_delete is not null");
            return (Criteria) this;
        }

        public Criteria andIsDeleteEqualTo(Boolean value) {
            addCriterion("is_delete =", value, "isDelete");
            return (Criteria) this;
        }

        public Criteria andIsDeleteNotEqualTo(Boolean value) {
            addCriterion("is_delete <>", value, "isDelete");
            return (Criteria) this;
        }

        public Criteria andIsDeleteGreaterThan(Boolean value) {
            addCriterion("is_delete >", value, "isDelete");
            return (Criteria) this;
        }

        public Criteria andIsDeleteGreaterThanOrEqualTo(Boolean value) {
            addCriterion("is_delete >=", value, "isDelete");
            return (Criteria) this;
        }

        public Criteria andIsDeleteLessThan(Boolean value) {
            addCriterion("is_delete <", value, "isDelete");
            return (Criteria) this;
        }

        public Criteria andIsDeleteLessThanOrEqualTo(Boolean value) {
            addCriterion("is_delete <=", value, "isDelete");
            return (Criteria) this;
        }

        public Criteria andIsDeleteIn(List<Boolean> values) {
            addCriterion("is_delete in", values, "isDelete");
            return (Criteria) this;
        }

        public Criteria andIsDeleteNotIn(List<Boolean> values) {
            addCriterion("is_delete not in", values, "isDelete");
            return (Criteria) this;
        }

        public Criteria andIsDeleteBetween(Boolean value1, Boolean value2) {
            addCriterion("is_delete between", value1, value2, "isDelete");
            return (Criteria) this;
        }

        public Criteria andIsDeleteNotBetween(Boolean value1, Boolean value2) {
            addCriterion("is_delete not between", value1, value2, "isDelete");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table exam_date
     *
     * @mbg.generated do_not_delete_during_merge Thu Sep 05 13:16:58 CST 2019
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table exam_date
     *
     * @mbg.generated Thu Sep 05 13:16:58 CST 2019
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}